/**
Copyright: Copyright (c) 2017 Andrey Penechko.
License: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).
Authors: Andrey Penechko.
*/
module test.mov;
import std.stdio;
import amd64asm;
import utils : ArraySink;

void testMov()
{
	CodeGen_x86_64!ArraySink codeGen;

	void assertEqualReset(ubyte[] expected) {
		if (codeGen.sink.data != expected)
		{
			writefln("%(%02X %) expected", expected);
			writefln("%(%02X %) generated", codeGen.sink.data);
			assert(false);
		}
		codeGen.sink.reset;
	}

	foreach (Reg64 regA; Reg64.min..Reg64Max) codeGen.mov(regA, Reg64.min);
	foreach (Reg64 regB; Reg64.min..Reg64Max) codeGen.mov(Reg64.min, regB);
	assertEqualReset([
0x48,0x89,0xC0,0x48,0x89,0xC1,0x48,0x89,0xC2,0x48,0x89,0xC3,0x48,0x89,0xC4,0x48,
0x89,0xC5,0x48,0x89,0xC6,0x48,0x89,0xC7,0x49,0x89,0xC0,0x49,0x89,0xC1,0x49,0x89,
0xC2,0x49,0x89,0xC3,0x49,0x89,0xC4,0x49,0x89,0xC5,0x49,0x89,0xC6,0x49,0x89,0xC7,
0x48,0x89,0xC0,0x48,0x89,0xC8,0x48,0x89,0xD0,0x48,0x89,0xD8,0x48,0x89,0xE0,0x48,
0x89,0xE8,0x48,0x89,0xF0,0x48,0x89,0xF8,0x4C,0x89,0xC0,0x4C,0x89,0xC8,0x4C,0x89,
0xD0,0x4C,0x89,0xD8,0x4C,0x89,0xE0,0x4C,0x89,0xE8,0x4C,0x89,0xF0,0x4C,0x89,0xF8]);

	foreach (Reg32 regA; Reg32.min..Reg32Max) codeGen.mov(regA, Reg32.min);
	foreach (Reg32 regB; Reg32.min..Reg32Max) codeGen.mov(Reg32.min, regB);
	assertEqualReset([
0x89,0xC0,0x89,0xC1,0x89,0xC2,0x89,0xC3,0x89,0xC4,0x89,0xC5,0x89,0xC6,0x89,0xC7,
0x41,0x89,0xC0,0x41,0x89,0xC1,0x41,0x89,0xC2,0x41,0x89,0xC3,0x41,0x89,0xC4,0x41,
0x89,0xC5,0x41,0x89,0xC6,0x41,0x89,0xC7,0x89,0xC0,0x89,0xC8,0x89,0xD0,0x89,0xD8,
0x89,0xE0,0x89,0xE8,0x89,0xF0,0x89,0xF8,0x44,0x89,0xC0,0x44,0x89,0xC8,0x44,0x89,
0xD0,0x44,0x89,0xD8,0x44,0x89,0xE0,0x44,0x89,0xE8,0x44,0x89,0xF0,0x44,0x89,0xF8]);

	foreach (Reg16 regA; Reg16.min..Reg16Max) codeGen.mov(regA, Reg16.min);
	foreach (Reg16 regB; Reg16.min..Reg16Max) codeGen.mov(Reg16.min, regB);
	assertEqualReset([
0x66,0x89,0xC0,0x66,0x89,0xC1,0x66,0x89,0xC2,0x66,0x89,0xC3,0x66,0x89,0xC4,0x66,
0x89,0xC5,0x66,0x89,0xC6,0x66,0x89,0xC7,0x66,0x41,0x89,0xC0,0x66,0x41,0x89,0xC1,
0x66,0x41,0x89,0xC2,0x66,0x41,0x89,0xC3,0x66,0x41,0x89,0xC4,0x66,0x41,0x89,0xC5,
0x66,0x41,0x89,0xC6,0x66,0x41,0x89,0xC7,0x66,0x89,0xC0,0x66,0x89,0xC8,0x66,0x89,
0xD0,0x66,0x89,0xD8,0x66,0x89,0xE0,0x66,0x89,0xE8,0x66,0x89,0xF0,0x66,0x89,0xF8,
0x66,0x44,0x89,0xC0,0x66,0x44,0x89,0xC8,0x66,0x44,0x89,0xD0,0x66,0x44,0x89,0xD8,
0x66,0x44,0x89,0xE0,0x66,0x44,0x89,0xE8,0x66,0x44,0x89,0xF0,0x66,0x44,0x89,0xF8]);

	foreach (Reg8 regA; Reg8.min..Reg8Max) codeGen.mov(regA, Reg8.min);
	foreach (Reg8 regB; Reg8.min..Reg8Max) codeGen.mov(Reg8.min, regB);
	assertEqualReset([
0x88,0xC0,0x88,0xC1,0x88,0xC2,0x88,0xC3,0x88,0xC4,0x88,0xC5,0x88,0xC6,0x88,0xC7,
0x41,0x88,0xC0,0x41,0x88,0xC1,0x41,0x88,0xC2,0x41,0x88,0xC3,0x41,0x88,0xC4,0x41,
0x88,0xC5,0x41,0x88,0xC6,0x41,0x88,0xC7,0x88,0xC0,0x88,0xC8,0x88,0xD0,0x88,0xD8,
0x88,0xE0,0x88,0xE8,0x88,0xF0,0x88,0xF8,0x44,0x88,0xC0,0x44,0x88,0xC8,0x44,0x88,
0xD0,0x44,0x88,0xD8,0x44,0x88,0xE0,0x44,0x88,0xE8,0x44,0x88,0xF0,0x44,0x88,0xF8]);

	// Mov reg8, imm8
	foreach (Reg8 regA; Reg8.min..Reg8Max) codeGen.mov(regA, Imm8(0x24));
	assertEqualReset([
0xB0,0x24,0xB1,0x24,0xB2,0x24,0xB3,0x24,0x40,0xB4,0x24,0x40,0xB5,0x24,0x40,0xB6,
0x24,0x40,0xB7,0x24,0x41,0xB0,0x24,0x41,0xB1,0x24,0x41,0xB2,0x24,0x41,0xB3,0x24,
0x41,0xB4,0x24,0x41,0xB5,0x24,0x41,0xB6,0x24,0x41,0xB7,0x24]);

	// Mov reg16, imm16
	foreach (Reg16 regA; Reg16.min..Reg16Max) codeGen.mov(regA, Imm16(0x2436));
	assertEqualReset([
0x66,0xB8,0x36,0x24,0x66,0xB9,0x36,0x24,0x66,0xBA,0x36,0x24,0x66,0xBB,0x36,0x24,
0x66,0xBC,0x36,0x24,0x66,0xBD,0x36,0x24,0x66,0xBE,0x36,0x24,0x66,0xBF,0x36,0x24,
0x66,0x41,0xB8,0x36,0x24,0x66,0x41,0xB9,0x36,0x24,0x66,0x41,0xBA,0x36,0x24,0x66,
0x41,0xBB,0x36,0x24,0x66,0x41,0xBC,0x36,0x24,0x66,0x41,0xBD,0x36,0x24,0x66,0x41,
0xBE,0x36,0x24,0x66,0x41,0xBF,0x36,0x24]);

	// Mov reg32, imm32
	foreach (Reg32 regA; Reg32.min..Reg32Max) codeGen.mov(regA, Imm32(0x24364758));
	assertEqualReset([
0xB8,0x58,0x47,0x36,0x24,0xB9,0x58,0x47,0x36,0x24,0xBA,0x58,0x47,0x36,0x24,0xBB,
0x58,0x47,0x36,0x24,0xBC,0x58,0x47,0x36,0x24,0xBD,0x58,0x47,0x36,0x24,0xBE,0x58,
0x47,0x36,0x24,0xBF,0x58,0x47,0x36,0x24,0x41,0xB8,0x58,0x47,0x36,0x24,0x41,0xB9,
0x58,0x47,0x36,0x24,0x41,0xBA,0x58,0x47,0x36,0x24,0x41,0xBB,0x58,0x47,0x36,0x24,
0x41,0xBC,0x58,0x47,0x36,0x24,0x41,0xBD,0x58,0x47,0x36,0x24,0x41,0xBE,0x58,0x47,
0x36,0x24,0x41,0xBF,0x58,0x47,0x36,0x24]);

	// Mov reg64, imm64
	foreach (Reg64 regA; Reg64.min..Reg64Max) codeGen.mov(regA, Imm64(0x24364758AABBCCDD));
	assertEqualReset([
0x48,0xB8,0xDD,0xCC,0xBB,0xAA,0x58,0x47,0x36,0x24,0x48,0xB9,0xDD,0xCC,0xBB,0xAA,
0x58,0x47,0x36,0x24,0x48,0xBA,0xDD,0xCC,0xBB,0xAA,0x58,0x47,0x36,0x24,0x48,0xBB,
0xDD,0xCC,0xBB,0xAA,0x58,0x47,0x36,0x24,0x48,0xBC,0xDD,0xCC,0xBB,0xAA,0x58,0x47,
0x36,0x24,0x48,0xBD,0xDD,0xCC,0xBB,0xAA,0x58,0x47,0x36,0x24,0x48,0xBE,0xDD,0xCC,
0xBB,0xAA,0x58,0x47,0x36,0x24,0x48,0xBF,0xDD,0xCC,0xBB,0xAA,0x58,0x47,0x36,0x24,
0x49,0xB8,0xDD,0xCC,0xBB,0xAA,0x58,0x47,0x36,0x24,0x49,0xB9,0xDD,0xCC,0xBB,0xAA,
0x58,0x47,0x36,0x24,0x49,0xBA,0xDD,0xCC,0xBB,0xAA,0x58,0x47,0x36,0x24,0x49,0xBB,
0xDD,0xCC,0xBB,0xAA,0x58,0x47,0x36,0x24,0x49,0xBC,0xDD,0xCC,0xBB,0xAA,0x58,0x47,
0x36,0x24,0x49,0xBD,0xDD,0xCC,0xBB,0xAA,0x58,0x47,0x36,0x24,0x49,0xBE,0xDD,0xCC,
0xBB,0xAA,0x58,0x47,0x36,0x24,0x49,0xBF,0xDD,0xCC,0xBB,0xAA,0x58,0x47,0x36,0x24]);

	// Mov reg8, mem8
	foreach (Reg8 regA; Reg8.min..Reg8Max) codeGen.mov(regA, memAddrDisp32(0x55667788));
	assertEqualReset([
0x8A,0x04,0x25,0x88,0x77,0x66,0x55,0x8A,0x0C,0x25,0x88,0x77,0x66,0x55,0x8A,0x14,
0x25,0x88,0x77,0x66,0x55,0x8A,0x1C,0x25,0x88,0x77,0x66,0x55,0x40,0x8A,0x24,0x25,
0x88,0x77,0x66,0x55,0x40,0x8A,0x2C,0x25,0x88,0x77,0x66,0x55,0x40,0x8A,0x34,0x25,
0x88,0x77,0x66,0x55,0x40,0x8A,0x3C,0x25,0x88,0x77,0x66,0x55,0x44,0x8A,0x04,0x25,
0x88,0x77,0x66,0x55,0x44,0x8A,0x0C,0x25,0x88,0x77,0x66,0x55,0x44,0x8A,0x14,0x25,
0x88,0x77,0x66,0x55,0x44,0x8A,0x1C,0x25,0x88,0x77,0x66,0x55,0x44,0x8A,0x24,0x25,
0x88,0x77,0x66,0x55,0x44,0x8A,0x2C,0x25,0x88,0x77,0x66,0x55,0x44,0x8A,0x34,0x25,
0x88,0x77,0x66,0x55,0x44,0x8A,0x3C,0x25,0x88,0x77,0x66,0x55]);

	// Mov reg16, mem16
	foreach (Reg16 regA; Reg16.min..Reg16Max) codeGen.mov(regA, memAddrDisp32(0x55667788));
	assertEqualReset([
0x66,0x8B,0x04,0x25,0x88,0x77,0x66,0x55,0x66,0x8B,0x0C,0x25,0x88,0x77,0x66,0x55,
0x66,0x8B,0x14,0x25,0x88,0x77,0x66,0x55,0x66,0x8B,0x1C,0x25,0x88,0x77,0x66,0x55,
0x66,0x8B,0x24,0x25,0x88,0x77,0x66,0x55,0x66,0x8B,0x2C,0x25,0x88,0x77,0x66,0x55,
0x66,0x8B,0x34,0x25,0x88,0x77,0x66,0x55,0x66,0x8B,0x3C,0x25,0x88,0x77,0x66,0x55,
0x66,0x44,0x8B,0x04,0x25,0x88,0x77,0x66,0x55,0x66,0x44,0x8B,0x0C,0x25,0x88,0x77,
0x66,0x55,0x66,0x44,0x8B,0x14,0x25,0x88,0x77,0x66,0x55,0x66,0x44,0x8B,0x1C,0x25,
0x88,0x77,0x66,0x55,0x66,0x44,0x8B,0x24,0x25,0x88,0x77,0x66,0x55,0x66,0x44,0x8B,
0x2C,0x25,0x88,0x77,0x66,0x55,0x66,0x44,0x8B,0x34,0x25,0x88,0x77,0x66,0x55,0x66,
0x44,0x8B,0x3C,0x25,0x88,0x77,0x66,0x55]);

	// Mov reg32, mem32
	foreach (Reg32 regA; Reg32.min..Reg32Max) codeGen.mov(regA, memAddrDisp32(0x55667788));
	assertEqualReset([
0x8B,0x04,0x25,0x88,0x77,0x66,0x55,0x8B,0x0C,0x25,0x88,0x77,0x66,0x55,0x8B,0x14,
0x25,0x88,0x77,0x66,0x55,0x8B,0x1C,0x25,0x88,0x77,0x66,0x55,0x8B,0x24,0x25,0x88,
0x77,0x66,0x55,0x8B,0x2C,0x25,0x88,0x77,0x66,0x55,0x8B,0x34,0x25,0x88,0x77,0x66,
0x55,0x8B,0x3C,0x25,0x88,0x77,0x66,0x55,0x44,0x8B,0x04,0x25,0x88,0x77,0x66,0x55,
0x44,0x8B,0x0C,0x25,0x88,0x77,0x66,0x55,0x44,0x8B,0x14,0x25,0x88,0x77,0x66,0x55,
0x44,0x8B,0x1C,0x25,0x88,0x77,0x66,0x55,0x44,0x8B,0x24,0x25,0x88,0x77,0x66,0x55,
0x44,0x8B,0x2C,0x25,0x88,0x77,0x66,0x55,0x44,0x8B,0x34,0x25,0x88,0x77,0x66,0x55,
0x44,0x8B,0x3C,0x25,0x88,0x77,0x66,0x55]);

	// Mov reg64, mem64
	foreach (Reg64 regA; Reg64.min..Reg64Max) codeGen.mov(regA, memAddrDisp32(0x55667788));
	assertEqualReset([
0x48,0x8B,0x04,0x25,0x88,0x77,0x66,0x55,0x48,0x8B,0x0C,0x25,0x88,0x77,0x66,0x55,
0x48,0x8B,0x14,0x25,0x88,0x77,0x66,0x55,0x48,0x8B,0x1C,0x25,0x88,0x77,0x66,0x55,
0x48,0x8B,0x24,0x25,0x88,0x77,0x66,0x55,0x48,0x8B,0x2C,0x25,0x88,0x77,0x66,0x55,
0x48,0x8B,0x34,0x25,0x88,0x77,0x66,0x55,0x48,0x8B,0x3C,0x25,0x88,0x77,0x66,0x55,
0x4C,0x8B,0x04,0x25,0x88,0x77,0x66,0x55,0x4C,0x8B,0x0C,0x25,0x88,0x77,0x66,0x55,
0x4C,0x8B,0x14,0x25,0x88,0x77,0x66,0x55,0x4C,0x8B,0x1C,0x25,0x88,0x77,0x66,0x55,
0x4C,0x8B,0x24,0x25,0x88,0x77,0x66,0x55,0x4C,0x8B,0x2C,0x25,0x88,0x77,0x66,0x55,
0x4C,0x8B,0x34,0x25,0x88,0x77,0x66,0x55,0x4C,0x8B,0x3C,0x25,0x88,0x77,0x66,0x55]);

	// Mov mem8, reg8
	foreach (Reg8 regA; Reg8.min..Reg8Max) codeGen.mov(memAddrDisp32(0x55667788), regA);
	assertEqualReset([
0x88,0x04,0x25,0x88,0x77,0x66,0x55,0x88,0x0C,0x25,0x88,0x77,0x66,0x55,0x88,0x14,
0x25,0x88,0x77,0x66,0x55,0x88,0x1C,0x25,0x88,0x77,0x66,0x55,0x40,0x88,0x24,0x25,
0x88,0x77,0x66,0x55,0x40,0x88,0x2C,0x25,0x88,0x77,0x66,0x55,0x40,0x88,0x34,0x25,
0x88,0x77,0x66,0x55,0x40,0x88,0x3C,0x25,0x88,0x77,0x66,0x55,0x44,0x88,0x04,0x25,
0x88,0x77,0x66,0x55,0x44,0x88,0x0C,0x25,0x88,0x77,0x66,0x55,0x44,0x88,0x14,0x25,
0x88,0x77,0x66,0x55,0x44,0x88,0x1C,0x25,0x88,0x77,0x66,0x55,0x44,0x88,0x24,0x25,
0x88,0x77,0x66,0x55,0x44,0x88,0x2C,0x25,0x88,0x77,0x66,0x55,0x44,0x88,0x34,0x25,
0x88,0x77,0x66,0x55,0x44,0x88,0x3C,0x25,0x88,0x77,0x66,0x55]);

	// Mov mem16, reg16
	foreach (Reg16 regA; Reg16.min..Reg16Max) codeGen.mov(memAddrDisp32(0x55667788), regA);
	assertEqualReset([
0x66,0x89,0x04,0x25,0x88,0x77,0x66,0x55,0x66,0x89,0x0C,0x25,0x88,0x77,0x66,0x55,
0x66,0x89,0x14,0x25,0x88,0x77,0x66,0x55,0x66,0x89,0x1C,0x25,0x88,0x77,0x66,0x55,
0x66,0x89,0x24,0x25,0x88,0x77,0x66,0x55,0x66,0x89,0x2C,0x25,0x88,0x77,0x66,0x55,
0x66,0x89,0x34,0x25,0x88,0x77,0x66,0x55,0x66,0x89,0x3C,0x25,0x88,0x77,0x66,0x55,
0x66,0x44,0x89,0x04,0x25,0x88,0x77,0x66,0x55,0x66,0x44,0x89,0x0C,0x25,0x88,0x77,
0x66,0x55,0x66,0x44,0x89,0x14,0x25,0x88,0x77,0x66,0x55,0x66,0x44,0x89,0x1C,0x25,
0x88,0x77,0x66,0x55,0x66,0x44,0x89,0x24,0x25,0x88,0x77,0x66,0x55,0x66,0x44,0x89,
0x2C,0x25,0x88,0x77,0x66,0x55,0x66,0x44,0x89,0x34,0x25,0x88,0x77,0x66,0x55,0x66,
0x44,0x89,0x3C,0x25,0x88,0x77,0x66,0x55]);

	// Mov mem32, reg32
	foreach (Reg32 regA; Reg32.min..Reg32Max) codeGen.mov(memAddrDisp32(0x55667788), regA);
	assertEqualReset([
0x89,0x04,0x25,0x88,0x77,0x66,0x55,0x89,0x0C,0x25,0x88,0x77,0x66,0x55,0x89,0x14,
0x25,0x88,0x77,0x66,0x55,0x89,0x1C,0x25,0x88,0x77,0x66,0x55,0x89,0x24,0x25,0x88,
0x77,0x66,0x55,0x89,0x2C,0x25,0x88,0x77,0x66,0x55,0x89,0x34,0x25,0x88,0x77,0x66,
0x55,0x89,0x3C,0x25,0x88,0x77,0x66,0x55,0x44,0x89,0x04,0x25,0x88,0x77,0x66,0x55,
0x44,0x89,0x0C,0x25,0x88,0x77,0x66,0x55,0x44,0x89,0x14,0x25,0x88,0x77,0x66,0x55,
0x44,0x89,0x1C,0x25,0x88,0x77,0x66,0x55,0x44,0x89,0x24,0x25,0x88,0x77,0x66,0x55,
0x44,0x89,0x2C,0x25,0x88,0x77,0x66,0x55,0x44,0x89,0x34,0x25,0x88,0x77,0x66,0x55,
0x44,0x89,0x3C,0x25,0x88,0x77,0x66,0x55]);

	// Mov mem64, reg64
	foreach (Reg64 regA; Reg64.min..Reg64Max) codeGen.mov(memAddrDisp32(0x55667788), regA);
	assertEqualReset([
0x48,0x89,0x04,0x25,0x88,0x77,0x66,0x55,0x48,0x89,0x0C,0x25,0x88,0x77,0x66,0x55,
0x48,0x89,0x14,0x25,0x88,0x77,0x66,0x55,0x48,0x89,0x1C,0x25,0x88,0x77,0x66,0x55,
0x48,0x89,0x24,0x25,0x88,0x77,0x66,0x55,0x48,0x89,0x2C,0x25,0x88,0x77,0x66,0x55,
0x48,0x89,0x34,0x25,0x88,0x77,0x66,0x55,0x48,0x89,0x3C,0x25,0x88,0x77,0x66,0x55,
0x4C,0x89,0x04,0x25,0x88,0x77,0x66,0x55,0x4C,0x89,0x0C,0x25,0x88,0x77,0x66,0x55,
0x4C,0x89,0x14,0x25,0x88,0x77,0x66,0x55,0x4C,0x89,0x1C,0x25,0x88,0x77,0x66,0x55,
0x4C,0x89,0x24,0x25,0x88,0x77,0x66,0x55,0x4C,0x89,0x2C,0x25,0x88,0x77,0x66,0x55,
0x4C,0x89,0x34,0x25,0x88,0x77,0x66,0x55,0x4C,0x89,0x3C,0x25,0x88,0x77,0x66,0x55]);

	// Mov mem8, imm8
	codeGen.mov(memAddrDisp32(0x55667788), Imm8(0xAA));
	assertEqualReset([0xC6,0x04,0x25,0x88,0x77,0x66,0x55,0xAA]);

	// Mov mem16, imm16
	codeGen.mov(memAddrDisp32(0x55667788), Imm16(0xAABB));
	assertEqualReset([0x66,0xC7,0x04,0x25,0x88,0x77,0x66,0x55,0xBB,0xAA]);

	// Mov mem32, imm32
	codeGen.mov(memAddrDisp32(0x55667788), Imm32(0xAABBCCDD));
	assertEqualReset([0xC7,0x04,0x25,0x88,0x77,0x66,0x55,0xDD,0xCC,0xBB,0xAA]);

	// Mov mem64, imm32
	// mov QWORD PTR [rsp-0x8],0xffffffffaabbccdd
	codeGen.mov(memAddrBaseDisp8(Reg32.ESP, cast(ubyte)(-0x8)), Imm64(0xAABBCCDD)); // -8
	assertEqualReset([0x48,0xC7,0x44,0x24,0xF8,0xDD,0xCC,0xBB,0xAA]);

	//printHex(codeGen.sink.data, 8);
}
