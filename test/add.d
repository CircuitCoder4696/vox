/**
Copyright: Copyright (c) 2017 Andrey Penechko.
License: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).
Authors: Andrey Penechko.
*/
module test.add;

void testAdd()
{
import utils;
	import test.utils;

	// Add reg8, reg8
	foreach (Register regA; Register.min..RegisterMax) testCodeGen.addb(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) testCodeGen.addb(Register.min, regB);
	assertHexAndReset("00C000C100C200C34000C44000C54000C64000C74100C04100C14100C24100C34100C44100C54100C64100C700C000C800D000D84000E04000E84000F04000F84400C04400C84400D04400D84400E04400E84400F04400F8");

	// Add reg16, reg16
	foreach (Register regA; Register.min..RegisterMax) testCodeGen.addw(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) testCodeGen.addw(Register.min, regB);
	assertHexAndReset("6601C06601C16601C26601C36601C46601C56601C66601C7664101C0664101C1664101C2664101C3664101C4664101C5664101C6664101C76601C06601C86601D06601D86601E06601E86601F06601F8664401C0664401C8664401D0664401D8664401E0664401E8664401F0664401F8");

	// Add reg32, reg32
	foreach (Register regA; Register.min..RegisterMax) testCodeGen.addd(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) testCodeGen.addd(Register.min, regB);
	assertHexAndReset("01C001C101C201C301C401C501C601C74101C04101C14101C24101C34101C44101C54101C64101C701C001C801D001D801E001E801F001F84401C04401C84401D04401D84401E04401E84401F04401F8");

	// Add reg64, reg64
	foreach (Register regA; Register.min..RegisterMax) testCodeGen.addq(regA, Register.min);
	foreach (Register regB; Register.min..RegisterMax) testCodeGen.addq(Register.min, regB);
	assertHexAndReset("4801C04801C14801C24801C34801C44801C54801C64801C74901C04901C14901C24901C34901C44901C54901C64901C74801C04801C84801D04801D84801E04801E84801F04801F84C01C04C01C84C01D04C01D84C01E04C01E84C01F04C01F8");
/*
	// Add reg8, imm8
	foreach (Register regA; Register.min..RegisterMax) testCodeGen.addb(regA, Imm8(0x24));
	printHex(testCodeGen.encoder.sink.data, 0);
	assertHexAndReset("4883C0244883C1244883C2244883C3244883C4244883C5244883C6244883C7244983C0244983C1244983C2244983C3244983C4244983C5244983C6244983C724");

	// Add reg16, imm16
	foreach (Register regA; Register.min..RegisterMax) testCodeGen.addw(regA, Imm16(0x2436));
	//assertHexAndReset("66B8362466B9362466BA362466BB362466BC362466BD362466BE362466BF36246641B836246641B936246641BA36246641BB36246641BC36246641BD36246641BE36246641BF3624");

	// Add reg32, imm32
	foreach (Register regA; Register.min..RegisterMax) testCodeGen.addd(regA, Imm32(0x24364758));
	//assertHexAndReset("B858473624B958473624BA58473624BB58473624BC58473624BD58473624BE58473624BF5847362441B85847362441B95847362441BA5847362441BB5847362441BC5847362441BD5847362441BE5847362441BF58473624");

	// Add reg64, imm64
	foreach (Register regA; Register.min..RegisterMax) testCodeGen.addq(regA, Imm64(0x24364758AABBCCDD));
	//assertHexAndReset("48B8DDCCBBAA5847362448B9DDCCBBAA5847362448BADDCCBBAA5847362448BBDDCCBBAA5847362448BCDDCCBBAA5847362448BDDDCCBBAA5847362448BEDDCCBBAA5847362448BFDDCCBBAA5847362449B8DDCCBBAA5847362449B9DDCCBBAA5847362449BADDCCBBAA5847362449BBDDCCBBAA5847362449BCDDCCBBAA5847362449BDDDCCBBAA5847362449BEDDCCBBAA5847362449BFDDCCBBAA58473624");
*/

	testCodeGen.encoder.sink.reset;
}
