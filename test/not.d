/**
Copyright: Copyright (c) 2017 Andrey Penechko.
License: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).
Authors: Andrey Penechko.
*/
module test.not;
import std.stdio;
import amd64asm;
import utils : ArraySink;

void testNot()
{
	CodeGen_x86_64!ArraySink codeGen;

	void assertEqualReset(ubyte[] expected) {
		if (codeGen.sink.data != expected)
		{
			writefln("%(%02X %) expected", expected);
			writefln("%(%02X %) generated", codeGen.sink.data);
			assert(false);
		}
		codeGen.sink.reset;
	}

	//not BYTE PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) codeGen.notb(memAddrBase(reg));
	assertEqualReset([
0xF6,0x10,0xF6,0x11,0xF6,0x12,0xF6,0x13,0xF6,0x14,0x24,0xF6,0x55,0x00,0xF6,0x16,
0xF6,0x17,0x41,0xF6,0x10,0x41,0xF6,0x11,0x41,0xF6,0x12,0x41,0xF6,0x13,0x41,0xF6,
0x14,0x24,0x41,0xF6,0x55,0x00,0x41,0xF6,0x16,0x41,0xF6,0x17]);

	//not WORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) codeGen.notw(memAddrBase(reg));
	assertEqualReset([
0x66,0xF7,0x10,0x66,0xF7,0x11,0x66,0xF7,0x12,0x66,0xF7,0x13,0x66,0xF7,0x14,0x24,
0x66,0xF7,0x55,0x00,0x66,0xF7,0x16,0x66,0xF7,0x17,0x66,0x41,0xF7,0x10,0x66,0x41,
0xF7,0x11,0x66,0x41,0xF7,0x12,0x66,0x41,0xF7,0x13,0x66,0x41,0xF7,0x14,0x24,0x66,
0x41,0xF7,0x55,0x00,0x66,0x41,0xF7,0x16,0x66,0x41,0xF7,0x17]);

	//not DWORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) codeGen.notd(memAddrBase(reg));
	assertEqualReset([
0xF7,0x10,0xF7,0x11,0xF7,0x12,0xF7,0x13,0xF7,0x14,0x24,0xF7,0x55,0x00,0xF7,0x16,
0xF7,0x17,0x41,0xF7,0x10,0x41,0xF7,0x11,0x41,0xF7,0x12,0x41,0xF7,0x13,0x41,0xF7,
0x14,0x24,0x41,0xF7,0x55,0x00,0x41,0xF7,0x16,0x41,0xF7,0x17]);

	//not QWORD PTR [reg]
	foreach (Register reg; Register.min..RegisterMax) codeGen.notq(memAddrBase(reg));
	assertEqualReset([
0x48,0xF7,0x10,0x48,0xF7,0x11,0x48,0xF7,0x12,0x48,0xF7,0x13,0x48,0xF7,0x14,0x24,
0x48,0xF7,0x55,0x00,0x48,0xF7,0x16,0x48,0xF7,0x17,0x49,0xF7,0x10,0x49,0xF7,0x11,
0x49,0xF7,0x12,0x49,0xF7,0x13,0x49,0xF7,0x14,0x24,0x49,0xF7,0x55,0x00,0x49,0xF7,
0x16,0x49,0xF7,0x17]);

	//not reg8
	foreach (Register reg; Register.min..RegisterMax) codeGen.notb(reg);
	assertEqualReset([
0xF6,0xD0,0xF6,0xD1,0xF6,0xD2,0xF6,0xD3,0x40,0xF6,0xD4,0x40,0xF6,0xD5,0x40,0xF6,
0xD6,0x40,0xF6,0xD7,0x41,0xF6,0xD0,0x41,0xF6,0xD1,0x41,0xF6,0xD2,0x41,0xF6,0xD3,
0x41,0xF6,0xD4,0x41,0xF6,0xD5,0x41,0xF6,0xD6,0x41,0xF6,0xD7]);

	//not reg16
	foreach (Register reg; Register.min..RegisterMax) codeGen.notw(reg);
	assertEqualReset([
0x66,0xF7,0xD0,0x66,0xF7,0xD1,0x66,0xF7,0xD2,0x66,0xF7,0xD3,0x66,0xF7,0xD4,0x66,
0xF7,0xD5,0x66,0xF7,0xD6,0x66,0xF7,0xD7,0x66,0x41,0xF7,0xD0,0x66,0x41,0xF7,0xD1,
0x66,0x41,0xF7,0xD2,0x66,0x41,0xF7,0xD3,0x66,0x41,0xF7,0xD4,0x66,0x41,0xF7,0xD5,
0x66,0x41,0xF7,0xD6,0x66,0x41,0xF7,0xD7]);

	//not reg32
	foreach (Register reg; Register.min..RegisterMax) codeGen.notd(reg);
	assertEqualReset([
0xF7,0xD0,0xF7,0xD1,0xF7,0xD2,0xF7,0xD3,0xF7,0xD4,0xF7,0xD5,0xF7,0xD6,0xF7,0xD7,
0x41,0xF7,0xD0,0x41,0xF7,0xD1,0x41,0xF7,0xD2,0x41,0xF7,0xD3,0x41,0xF7,0xD4,0x41,
0xF7,0xD5,0x41,0xF7,0xD6,0x41,0xF7,0xD7]);

	//not reg64
	foreach (Register reg; Register.min..RegisterMax) codeGen.notq(reg);
	assertEqualReset([
0x48,0xF7,0xD0,0x48,0xF7,0xD1,0x48,0xF7,0xD2,0x48,0xF7,0xD3,0x48,0xF7,0xD4,0x48,
0xF7,0xD5,0x48,0xF7,0xD6,0x48,0xF7,0xD7,0x49,0xF7,0xD0,0x49,0xF7,0xD1,0x49,0xF7,
0xD2,0x49,0xF7,0xD3,0x49,0xF7,0xD4,0x49,0xF7,0xD5,0x49,0xF7,0xD6,0x49,0xF7,0xD7]);
}
