Typical encodings
                                      WRXB
putInstrBinaryRegReg  |  [L.OS]  [REX.WR r]  Opcode      ModR/r
putInstrBinaryRegImm  |  [L.OS]  [REX.W  R]  Opcode|R                          Imm8/16/32/64
putInstrBinaryRegImm  |  [L.OS]  [REX.W  R]  Opcode      ModO/R                Imm8/16/32/64
putInstrBinaryRegMem  |  [L.OS]  [REX.WRIB]  Opcode      ModR/M  SIB  Disp8/32
putInstrBinaryOpMem   |  [L.OS]  [REX.W IB]  Opcode      ModO/M  SIB  Disp8/32
putInstrBinaryMemImm  |  [L.OS]  [REX.W IB]  Opcode      ModO/M  SIB  Disp8/32 Imm8/16/32

putInstrUnaryRegOpMod |  [L.OS]  [REX.W  R]  Opcode      ModO/R
putInstrUnaryMemOpMod |  [L.OS]  [REX.W  B]  Opcode      ModO/B
putInstrUnaryReg      |  [L.OS]  [REX.W  R]  Opcode|R


Memory

With SIB byte
[L.OS] [REX.WRIB] [0F] Opcode ModR/M SIB Disp8/32
[L.OS] [REX.W IB] [0F] Opcode Mod0/M SIB Disp8/32 Imm8/16/32
[L.OS] [REX.WR  ] [0F] Opcode ModR/M SIB Disp32
[L.OS] [REX.W   ] [0F] Opcode Mod0/M SIB Disp32   Imm8/16/32

Without SIB byte
[L.OS] [REX.WR B] [0F] Opcode ModR/M Disp8/32                 [base]
[L.OS] [REX.W  B] [0F] Opcode Mod0/M Disp8/32 Imm8/16/32      [base+disp8/32]


L.OS - LegacyPrefix.OPERAND_SIZE
S - scale
I - index
B - base
O - opcode (some instructions can replace register field of ModRM byte with 3-bit opcode extension)
R - register 1
r - register 2, this variant is used when second register is encoded.
M - SP register in memory encoding


add
sub
inc
dec
mul
div
mov
not
nop
ret
pop
push
call
cmp
jmp
jcc
setcc
test
movzx

Implemented instructions
add sub mul div dec inc mov not nop pop push ret call cmp jmp jcc setcc test movzx

TODO

movsx
xchg

and
or
xor
lea

add sub and cmp use nearly identical encoding



