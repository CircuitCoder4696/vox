name: Build
on:
  push:
    branches:
      - master
  release:
    types:
      - created
env:
  DC: ldc-1.23.0

jobs:         
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        dc: [ldc-1.23.0]
        include:
        - os: ubuntu-latest
          EXE: tjc
          PLATFORM: linux-amd64
        - os: windows-latest
          EXE: tjc.exe
          PLATFORM: windows-amd64
    steps:
      - uses: actions/checkout@v2
      - uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}
      - name: Build release
        shell: bash
        run: |
          cd source
          ldc2 -m64 -O3 -release -boundscheck=off -enable-inlining -flto=full --defaultlib=phobos2-ldc-lto,druntime-ldc-lto -d-version=cli -of=${{matrix.EXE}} -i main.d
      - uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.PLATFORM}}
          path: ./source/${{matrix.EXE}}

  upload:
    name: Upload build
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      # Cloning is needed for `gh release create` to work. It looks repository up in .git folder
      - uses: actions/checkout@v2
      # Download build artifacts of other jobs
      - uses: actions/download-artifact@v2
        with:
          path: .
      # `gh release` is only available in v1.0.0, while runner only has v0.12.0
      - name: Install GH CLI
        shell: bash
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          sudo apt-add-repository https://cli.github.com/packages
          sudo apt -qq update
          sudo apt -qq install gh
      # Delete release and tag, so that we get proper date and commit on github
      - uses: dev-drprasad/delete-tag-and-release@v0.1.2
        if: github.ref == 'refs/heads/master'
        with:
          delete_release: true
          tag_name: v0.1.0 # tag name to delete
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Create CI release and upload builds
      - name: Upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          tag=`basename ${{ github.ref }}`
          if [ $tag = 'master' ]; then
            tag='CI'
            gh release create CI --title 'CI build'
          fi
          
          # --clobber Overwrite existing assets of the same name
          gh release upload $tag \
            './linux-amd64/tjc#linux-amd64' \
            './windows-amd64/tjc.exe#windows-amd64' \
            --clobber
